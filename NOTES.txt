                                    PTHREADS

pthread_create(pthread data type by ref, attributes, function (pointer) by ref, arguments (void *))
returns 0 in case of success

BASICS:
void    *thread_func(void);

int main()
{
    pthread_t   newthread;

    if (pthread_create(&newthread, NULL, thread_func, NULL)) //newthread will execute thread_func concurrently w/ main until one finished or ...
        return (1);
        ---     
    pthread_join(&newthread, NULL); // will wait for other threads to finish
}
   > -------- & -------- <

PASSING ARGUMENTS TO THREADS:
void    *thread_func(void *args)
{
    <data_type> *data = (<data_type> *)args;
    
    // ... do stuff
}

int main()
{
    pthread_t   newthread;
    <data_type>   arg;

    if (pthread_create(&newthread, NULL, thread_func, &arg)) //
        return (1);
        ---     
    pthread_join(&newthread, ...); //
}

GETTING RESULTS FROM THREADS:
void    *thread_func(void *args)
{
    <data_type> *data = (<data_type> *)malloc(sizeof(data_type));
    data = stuff;

}

int main()
{
    pthread_t   newthread;
    <data_type>   *argback;

    if (pthread_create(&newthread, NULL, thread_func, NULL))
        return (1);
        ---     
    pthread_join(&newthread, &argback); // last arg being 'void **'
}

MUTEX:
pthread_mutex_t mutex;

if (pthread_mutex_init(&mutex, NULL)) // mutex = OTHREAD_MUTEX_INITIALIZER (??)
    return (1);
    ...
if (pthread_mutex_lock(&mutex)) //
    return (2);
    ...
if (pthread_mutex_unlock(&mutex)) //
    return (3);
    ...
if (pthread_mutex_destroy(&mutex)) //
    return (4);