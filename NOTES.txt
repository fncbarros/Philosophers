Log:
	---->Cases 5 800 200 200 7, 20 400 100 100 7 and 10 400 100 100 7 showing inconstant behaviour
        ("if a philosopher doesn’t start eating ’time_to_die’ milliseconds after starting his last meal or the beginning of the simulation, it dies")
        print only when both forks acquired for clarity

        Preventing dead_lock:
        Even philos take right fork first, odd ones take left one first;
        Priority for taking fork given to thread with the biggest wait time and is not sleeping

        if (2 * meal_time > curr - last_meal)
            no lock

        LLONG_MAX = 9223372036854775807
        ULLONG_MAX = 18446744073709551615
        INT_MAX = 2147483647
        4 310 200 100

?:
Queue for holding forks?
Error handling in threaded function? (3rd loop in main)
Should I register initial time once for all or once for each as I create threads?

                            ---------TIME---------
        (long)
        uint64_t    ft_time(void)
            gettimeofday;
            return time.tv_sec * 1000 + time.tv_usec / 1000;

        long seconds = (end.tv_sec - start.tv_sec);
        long micros = ((seconds * 1000000) + end.tv_usec) - (start.tv_usec);
        printf("The elapsed time is %d seconds and %d micros\n", seconds, micros);

        printf("Time taken to count to 10^5 is : %ld micro seconds\n",
        ((end.tv_sec * 1000000 + end.tv_usec) -
        (start.tv_sec * 1000000 + start.tv_usec)));

--> The Mac delay problem:

        (by msessa)
        /**/
        void	ft_sleep(t_timeval start_time, int time_to_sleep_in_us)
        {
            usleep(time_to_sleep_in_us - time_to_sleep_in_us / 10);
            while (ft_delta_tv_in_us(start_time, ft_get_tv())
                <= time_to_sleep_in_us)
                continue ;
        }

        https://www.notion.so/philosophers-VM-c60be9c836084edfbcd9c07e29b429c4
        "The secret is using small delays in a loop to achieve greater precision"
                            ---------TIME---------

    forks:
        // bool	*r_fork;	// N0 can take fork 0 and 1, N1 can take 1 and 2 ... Nphil_num can take fork phil_num and 0 (r_fork being equivalent to corresponding N)
	    // bool	*l_fork;
    How to attribute them: (init ft)
        while (i < philo_num - 1)
            philo[i]->r_fork = params->(.)fork[i]; philo[i]l_fork = params->(.)fork[i + 1];
        philo[i]->l_fork = params->(.)fork[i]; philo[i]->l_fork = params->(.)fork[0];





                                    PTHREADS

pthread_create(pthread data type by ref, attributes, function (pointer) by ref, arguments (void *))
returns 0 in case of success

BASICS:
void    *thread_func(void);

int main()
{
    pthread_t   newthread;

    if (pthread_create(&newthread, NULL, thread_func, NULL)) //newthread will execute thread_func concurrently w/ main until one finished or ...
        return (1);
        ---
    pthread_join(&newthread, NULL); // will wait for other threads to finish
}
   > -------- & -------- <

PASSING ARGUMENTS TO THREADS:
void    *thread_func(void *args)
{
    <data_type> *data = (<data_type> *)args;

    // ... do stuff
}

int main()
{
    pthread_t   newthread;
    <data_type>   arg;

    if (pthread_create(&newthread, NULL, thread_func, &arg)) //
        return (1);
        ---
    pthread_join(&newthread, ...); //
}

GETTING RESULTS FROM THREADS:
void    *thread_func(void *args)
{
    <data_type> *data = (<data_type> *)malloc(sizeof(data_type));
    data = stuff;

}

int main()
{
    pthread_t   newthread;
    <data_type>   *argback;

    if (pthread_create(&newthread, NULL, thread_func, NULL))
        return (1);
        ---
    pthread_join(&newthread, &argback); // last arg being 'void **'
}

MUTEX:
pthread_mutex_t mutex;

if (pthread_mutex_init(&mutex, NULL)) // mutex = OTHREAD_MUTEX_INITIALIZER (??)
    return (1);
    ...
if (pthread_mutex_lock(&mutex)) //
    return (2);
    ...
if (pthread_mutex_unlock(&mutex)) //
    return (3);
    ...
if (pthread_mutex_destroy(&mutex)) //
    return (4);



                                                    --DEBUGGING--
LLDB:
thread list -- lists running threads; '*' points to current thread
t <thread_num> or thread select <thread_num> -- switches to thread <thread_num>
b <breakpoint> thread <thread_num> -- sets breakpoint to thread specified by <thread_num>

FSANITIZE:
-fsanitize=thread (on compilation)

(On *.h file):
#if defined(__has_feature)
#  if __has_feature(thread_sanitizer)
// code that builds only under ThreadSanitizer
#  endif
#endif

DELETED:

[thread.c]
void    ft_eat(t_philo *p)
{
	if (!try_get_fork(p->r_fork))
		return ;
	if (!ft_printmsg(p, "has taken a fork."))
		return ;
	if (!try_get_fork(p->l_fork))
	{
		release_fork(p->r_fork);
		ft_printmsg(p, "has released a fork."); //no need for err checking here
		return ;
	}
	if (!ft_printmsg(p, "has taken a fork."))
		return ;
	p->state = EATING;
	if(!ft_printmsg(p, "is eating."))
		return ;
	p->last_meal = ft_gettime(); // ??
	p->meals_eaten++;
	ft_usleep(p->timings.meal_time);
	// usleep((useconds_t)p->timings.meal_time);
	release_fork(p->r_fork);
	release_fork(p->l_fork);
	// while (!release_fork(p->l_fork) || !release_fork(p->r_fork)) // in case it fails to unlock..?
	// 	continue ;
	ft_printmsg(p, "has released both forks.");
	pthread_mutex_unlock(&p->l_fork->lock); // hate it ...
}

2nd vers

/*	void	ft_eat(t_philo *p)
{
	if (!p->r_fork->is_taken && !p->l_fork->is_taken)
	{
		pthread_mutex_lock(&p->r_fork->lock);
		p->r_fork->is_taken = 1;
		if (!ft_printmsg(p, "has grabbed a fork."))
		{
			pthread_mutex_unlock(&p->r_fork->lock);
			pthread_mutex_unlock(&p->l_fork->lock);
			return ;
		}
		if (p->l_fork->is_taken) // case philo num == 1
		{
			p->r_fork->is_taken = 0;
			ft_printmsg(p, "has dropped a fork.");
			pthread_mutex_unlock(&p->r_fork->lock);
			pthread_mutex_unlock(&p->l_fork->lock);
			return ;
		}
		pthread_mutex_lock(&p->l_fork->lock);
		p->l_fork->is_taken = 1;
		if (!ft_printmsg(p, "has grabbed a fork."))
		{
			pthread_mutex_unlock(&p->r_fork->lock);
			pthread_mutex_unlock(&p->l_fork->lock);
			return ;
		}


		p->state = EATING;
		if (!ft_printmsg(p, "is eating."))
		{
			pthread_mutex_unlock(&p->r_fork->lock);
			pthread_mutex_unlock(&p->l_fork->lock);
			return ;
		}
		p->meals_eaten++;
		p->last_meal = ft_gettime();
		if (!p->last_meal)
		{
			pthread_mutex_unlock(&p->r_fork->lock);
			pthread_mutex_unlock(&p->l_fork->lock);
			set_error(p->err, 7);
			return ;
		}
		ft_usleep(p->timings.meal_time);
		p->r_fork->is_taken = 0;
		p->l_fork->is_taken = 0;
		if (!ft_printmsg(p, "has dropped both forks."))
		{
			pthread_mutex_unlock(&p->r_fork->lock);
			pthread_mutex_unlock(&p->l_fork->lock);
			return ;
		}
		if (pthread_mutex_unlock(&p->r_fork->lock) || pthread_mutex_unlock(&p->l_fork->lock))
			return ;
	}
}
*/

long long	elaps_time_tv(t_tv init_time)
{
	t_tv		curr_time;
	long long	elapsed;

	if (gettimeofday(&curr_time, 0))
		return (0);
	elapsed = (curr_time.tv_sec - init_time.tv_sec) * 1000000;
	elapsed += (curr_time.tv_usec - init_time.tv_usec);
	return (elapsed);
}

/*	(on ft_printmsg) print death if it hasn't passed the 10us since first death:
	long long	time_since_death;
	...
	time_since_death = elaps_time(*p->someone_died);
	...
	if (time_since_death > 10)
	{
		if (pthread_mutex_unlock(p->printlock))
			return (set_error(p->err, 8));
		return (0);
	}
	else if (!(*p->someone_died && p->state != DEAD))
	...*/
